#server.port=8081

spring.jpa.hibernate.ddl-auto=update
#spring.datasource.url=jdbc:mysql://${MYSQL_URL:localhost}:3306/${MYSQL_DATABASE:proposta}?createDatabaseIfNotExist=true&serverTimezone=UTC

spring.datasource.url=${MYSQL_HOST:jdbc:mysql://localhost:3306/proposta?createDatabaseIfNotExist=true&serverTimezone=UTC}
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PASSWORD:root}
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql: true

#acessos externos analise
api.consultadadossolicitante=${API_ANALISE:http://localhost:9999}
api.requested=${ANALISE_REQUEST:/api/solicitacao}

#acessos externos cartao
api.cartao=${API_CARTAO:http://localhost:8888}
api.buscacartao=${BUSCA_CARTAO:/api/cartoes}
#Schedule
periodo.cartao=${PERIODO_CARTAO:30000}


# actuator
management.endpoint.health.show-details=always
#management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.include=info,health,prometheus,metric
management.endpoints.prometheus.enabled=true
# prometheus
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:serviço de proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

health.proposta.url=${HEALTH_PROPOSTA_URL:http://localhost}
health.proposta.porta=${HEALTH_PROPOSTA_PORTA:9999}

info.app.name=@project.name@
info.app.version=@project.version@
info.app.java.source=@java.version@
info.app.encoding=@project.build.sourceEncoding@

management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true



management.endpoint.health.status.http-mapping.UP=200
management.endpoint.health.status.http-mapping.UNKNOWN=200
management.endpoint.health.status.http-mapping.DOWN=503
management.endpoint.health.status.http-mapping.OUT_OF_SERVICE=503


## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
#spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://keycloak:8080/auth/realms/nosso-cartao}

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://keycloak:8080/auth/realms/nosso-cartao/protocol/openid-connect/certs}


# Para deixar o console colorido
spring.output.ansi.enabled=ALWAYS



# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name:proposta}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}